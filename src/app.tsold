type Admin = {
    name: string;
    privileges: string[];
};

type Employee = {
    name: string;
    startDate: Date;
};

type ElevatedEmployee = Admin & Employee;

const e1: ElevatedEmployee = {
    name: 'Vlad',
    privileges: ['create-server'],
    startDate: new Date
}

type Combinable = string | number;
type Numeric = number | boolean;
type Universal = Combinable & Numeric;

let u1: Universal = 67;

function addAny(a: number, b: number): number;
function addAny(a: string, b: string): string;
function addAny(a: Combinable, b: Combinable) {
    if (typeof a === 'string' || typeof b === 'string') {
        return a.toString() + b.toString();
    }
    return a + b;
}

const result = addAny('Vlad', ' Tania').split(' ');

interface Bird {
    type: 'bird',
    flySpeed: number
}

interface Horse {
    type: 'horse',
    runSpeed: number
}

type Animal = Bird | Horse;

function moveAnimal(animal: Animal) {
    let speed: number;
    switch (animal.type) {
        case 'bird':
            speed = animal.flySpeed;
            break;
        case 'horse':
            speed = animal.runSpeed;
    }

    console.log('Animal speed', speed);
    
}

const paragraph = document.querySelector('p');
// const input = <HTMLInputElement>document.getElementById('user-input')!;
const input = document.getElementById('user-input')! as HTMLInputElement;

input.value = 'Hi there!';

interface ErrorContainer {
    [prop: string]: string;
}

const errorBag: ErrorContainer = {
    email: "Input valid email",
    name: 'Name required'
}

const fetchedUserData = {
    name: 'Vlad',
    age: 41,
    job: {
        title: 'Developer',
        description: 'My job desc'
    }
}

console.log(fetchedUserData?.job?.title);

